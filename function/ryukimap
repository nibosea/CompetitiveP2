// https://atcoder.jp/contests/abc253/submissions/32071960
template<class T> class MapMultiSet {
    using i64 = long long;
    std::map<T, i64> mp;
public:
    bool add(T x) { mp[x] += 1; return true; }
    bool add(T x, i64 c) { mp[x] += c; return true; }
    bool remove(T x) {
        if (mp.find(x) == mp.end()) return false;
        if (mp[x] == 1) { mp.erase(x); return true; }
        mp[x] -= 1;
        return true;
    }
    bool remove(T x, i64 c) {
        if (mp.find(x) == mp.end()) return false;
        if (mp[x] <= c) { mp.erase(x); return true; }
        mp[x] -= c;
        return true;
    }
    T min() {
        assert(!mp.empty());
        return get<0>(*mp.begin());
    }
    T max() {
        assert(!mp.empty());
        return get<0>(*prev(mp.end()));
    }
    int size() {
        return mp.size();
    }
    i64 count(T x) {
        if (mp.find(x) == mp.end()) return 0;
        return mp[x];
    }
    bool empty() { return mp.empty(); }
    bool not_empty() { return !mp.empty(); }
    bool contains(T x) { return mp.find(x) != mp.end(); }
};
